/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  PayableOverrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  WalletExample,
  WalletExampleInterface,
} from "../../../contracts/WalletExampleWithoutShield.sol/WalletExample";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract Shield",
        name: "shield",
        type: "address",
      },
    ],
    stateMutability: "payable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "reason",
        type: "string",
      },
    ],
    name: "InvalidCredentials",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "c",
        type: "address",
      },
    ],
    name: "IsShieldable",
    type: "event",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "to",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "call",
            type: "bytes",
          },
          {
            internalType: "uint256",
            name: "timestamp",
            type: "uint256",
          },
          {
            internalType: "bytes[]",
            name: "approvals",
            type: "bytes[]",
          },
        ],
        internalType: "struct Credentials",
        name: "credentials",
        type: "tuple",
      },
    ],
    name: "burn",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "address",
            name: "to",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "call",
            type: "bytes",
          },
          {
            internalType: "uint256",
            name: "timestamp",
            type: "uint256",
          },
          {
            internalType: "bytes[]",
            name: "approvals",
            type: "bytes[]",
          },
        ],
        internalType: "struct Credentials",
        name: "credentials",
        type: "tuple",
      },
    ],
    name: "protectedWithdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "unprotectedWithdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405260405162001423380380620014238339810160408190526200002691620000de565b600080546001600160a01b0319166001600160a01b03831617905560405181907f63e9224e63cb34d86b43ad704e00293889c168d42800490986f06bbd4809b06590620000759030906200011c565b60405180910390a15050600280546001600160a01b031916331790556200012c565b60006001600160a01b0382165b92915050565b6000620000a48262000097565b620000c281620000aa565b8114620000ce57600080fd5b50565b8051620000a481620000b7565b600060208284031215620000f557620000f5600080fd5b6000620001038484620000d1565b949350505050565b620001168162000097565b82525050565b60208101620000a482846200010b565b6112e7806200013c6000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80633e4b8af614610046578063d0a82e121461005b578063d15e524a1461006e575b600080fd5b61005961005436600461074f565b610081565b005b610059610069366004610793565b6100c9565b61005961007c366004610a4f565b61031d565b6002546001600160a01b0316331461009857600080fd5b604051339082156108fc029083906000818181858888f193505050501580156100c5573d6000803e3d6000fd5b5050565b60006100d86020830183610aa6565b6100e56020840184610ac7565b84604001356040516020016100fd9493929190610b63565b60408051601f198184030181529190528051602090910120905060006101926101296060850185610b9c565b600081811061013a5761013a610bf0565b905060200281019061014c9190610ac7565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061018c92508691506105339050565b90610563565b60008054919250906001600160a01b0316634c485a2285846101b76020830183610aa6565b6101c460208a018a610ac7565b6101d391600491600091610c06565b6101dc91610c36565b6101e960208b018b610ac7565b6040518763ffffffff1660e01b815260040161020a96959493929190610e3a565b600060405180830381865afa158015610227573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261024f9190810190610f13565b905060005b815181101561031657336001600160a01b031682828151811061027957610279610bf0565b60200260200101516001600160a01b0316036103045760018060006102a16060890189610b9c565b60008181106102b2576102b2610bf0565b90506020028101906102c49190610ac7565b6040516102d2929190610f60565b6040518091039020815260200190815260200160002060006101000a81548160ff021916908315150217905550610316565b8061030e81610f83565b915050610254565b5050505050565b60005460408051635c975abb60e01b8152905183926001600160a01b031691635c975abb9160048083019260209291908290030181865afa158015610366573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061038a9190610fb0565b156103e1576000546001600160a01b0316301480156103bb575063da1f874d60e01b6001600160e01b031960003516145b6103e157604051632022058360e01b81526004016103d890610fff565b60405180910390fd5b6000816040516020016103f4919061111f565b60408051601f198184030181529190525161040f9036611130565b600080549192506001600160a01b0390911690632f82f58a908490339030906001600160e01b0319813516906104489088903681610c06565b6040518763ffffffff1660e01b815260040161046996959493929190611143565b600060405180830381865afa158015610486573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526104ae9190810190610f13565b50604051339085156108fc029086906000818181858888f193505050501580156104dc573d6000803e3d6000fd5b50600180600084606001516000815181106104f9576104f9610bf0565b602002602001015180519060200120815260200190815260200160002060006101000a81548160ff02191690831515021790555050505050565b6000816040516020016105469190611154565b604051602081830303815290604052805190602001209050919050565b60008060006105728585610589565b9150915061057f816105ce565b5090505b92915050565b60008082516041036105bf5760208301516040840151606085015160001a6105b387828585610680565b945094505050506105c7565b506000905060025b9250929050565b60008160048111156105e2576105e261118f565b036105ea5750565b60018160048111156105fe576105fe61118f565b0361061b5760405162461bcd60e51b81526004016103d8906111d9565b600281600481111561062f5761062f61118f565b0361064c5760405162461bcd60e51b81526004016103d89061121d565b60038160048111156106605761066061118f565b0361067d5760405162461bcd60e51b81526004016103d89061122d565b50565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156106b7575060009050600361072e565b6000600187878787604051600081526020016040526040516106dc949392919061127c565b6020604051602081039080840390855afa1580156106fe573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166107275760006001925092505061072e565b9150600090505b94509492505050565b805b811461067d57600080fd5b803561058381610737565b60006020828403121561076457610764600080fd5b60006107708484610744565b949350505050565b60006080828403121561078d5761078d600080fd5b50919050565b6000602082840312156107a8576107a8600080fd5b81356001600160401b038111156107c1576107c1600080fd5b61077084828501610778565b634e487b7160e01b600052604160045260246000fd5b601f19601f83011681018181106001600160401b0382111715610808576108086107cd565b6040525050565b600061081a60405190565b905061082682826107e3565b919050565b60006001600160a01b038216610583565b6107398161082b565b80356105838161083c565b60006001600160401b03821115610869576108696107cd565b601f19601f83011660200192915050565b82818337506000910152565b600061089961089484610850565b61080f565b9050828152602081018484840111156108b4576108b4600080fd5b6108bf84828561087a565b509392505050565b600082601f8301126108db576108db600080fd5b8135610770848260208601610886565b60006001600160401b03821115610904576109046107cd565b5060209081020190565b600061091c610894846108eb565b8381529050602080820190840283018581111561093b5761093b600080fd5b835b8181101561097b5780356001600160401b0381111561095e5761095e600080fd5b80860161096b89826108c7565b855250506020928301920161093d565b5050509392505050565b600082601f83011261099957610999600080fd5b813561077084826020860161090e565b6000608082840312156109be576109be600080fd5b6109c8608061080f565b905060006109d68484610845565b82525060208201356001600160401b038111156109f5576109f5600080fd5b610a01848285016108c7565b6020830152506040610a1584828501610744565b60408301525060608201356001600160401b03811115610a3757610a37600080fd5b610a4384828501610985565b60608301525092915050565b60008060408385031215610a6557610a65600080fd5b6000610a718585610744565b92505060208301356001600160401b03811115610a9057610a90600080fd5b610a9c858286016109a9565b9150509250929050565b600060208284031215610abb57610abb600080fd5b60006107708484610845565b6000808335601e1936859003018112610ae257610ae2600080fd5b8084019250823591506001600160401b03821115610b0257610b02600080fd5b602083019250600182023603831315610b1d57610b1d600080fd5b509250929050565b610b2e8161082b565b82525050565b8183526000602084019350610b4a83858461087a565b601f19601f8401165b9093019392505050565b80610b2e565b60608101610b718287610b25565b8181036020830152610b84818587610b34565b9050610b936040830184610b5d565b95945050505050565b6000808335601e1936859003018112610bb757610bb7600080fd5b8084019250823591506001600160401b03821115610bd757610bd7600080fd5b60209283019282023603831315610b1d57610b1d600080fd5b634e487b7160e01b600052603260045260246000fd5b60008085851115610c1957610c19600080fd5b83861115610c2957610c29600080fd5b5050820193919092039150565b80356001600160e01b03191682826004821015610c6957610c646001600160e01b0319836004036008021b90565b831692505b505092915050565b6000610c806020840184610845565b9392505050565b6000808335601e1936859003018112610ca257610ca2600080fd5b8381016020810193503591506001600160401b03821115610cc557610cc5600080fd5b36829003831315610b1d57610b1d600080fd5b6000610c806020840184610744565b6000808335601e1936859003018112610d0257610d02600080fd5b8381016020810193503591506001600160401b03821115610d2557610d25600080fd5b602082023603831315610b1d57610b1d600080fd5b6000610770848484610b34565b818352600060208401935083602084028101838060005b87811015610d99578484038952610d758284610c87565b610d80868284610d3a565b95506020840160209b909b019a93505050600101610d5e565b5091979650505050505050565b600060808301610db68380610c71565b610dc08582610b25565b50610dce6020840184610c87565b8583036020870152610de1838284610b34565b92505050610df26040840184610cd8565b610dff6040860182610b5d565b50610e0d6060840184610ce7565b8583036060870152610e20838284610d47565b9695505050505050565b6001600160e01b03198116610b2e565b60a08082528101610e4b8189610da6565b9050610e5a6020830188610b25565b610e676040830187610b25565b610e746060830186610e2a565b8181036080830152610e87818486610b34565b98975050505050505050565b80516105838161083c565b6000610eac610894846108eb565b83815290506020808201908402830185811115610ecb57610ecb600080fd5b835b8181101561097b5780610ee08882610e93565b84525060209283019201610ecd565b600082601f830112610f0357610f03600080fd5b8151610770848260208601610e9e565b600060208284031215610f2857610f28600080fd5b81516001600160401b03811115610f4157610f41600080fd5b61077084828501610eef565b6000610f5a83858461087a565b50500190565b6000610770828486610f4d565b634e487b7160e01b600052601160045260246000fd5b60006000198203610f9657610f96610f6d565b5060010190565b801515610739565b805161058381610f9d565b600060208284031215610fc557610fc5600080fd5b60006107708484610fa5565b6014815260006020820173151a194814da1a595b19081a5cc81c185d5cd95960621b815291505b5060200190565b6020808252810161058381610fd1565b60005b8381101561102a578181015183820152602001611012565b50506000910152565b600061103d825190565b80845260208401935061105481856020860161100f565b601f19601f820116610b53565b6000610c808383611033565b6000611077825190565b808452602084019350836020820285016110918560200190565b8060005b85811015610d9957848403895281516110ae8582611061565b94506020830160209a909a0199925050600101611095565b805160009060808401906110da8582610b25565b50602083015184820360208601526110f28282611033565b91505060408301516111076040860182610b5d565b5060608301518482036060860152610b93828261106d565b60208082528101610c8081846110c6565b8181038181111561058357610583610f6d565b60a08082528101610e4b81896110c6565b7f19457468657265756d205369676e6564204d6573736167653a0a3332000000008152601c0160006111868284610b5d565b50602001919050565b634e487b7160e01b600052602160045260246000fd5b601881526000602082017f45434453413a20696e76616c6964207369676e6174757265000000000000000081529150610ff8565b60208082528101610583816111a5565b601f81526000602082017f45434453413a20696e76616c6964207369676e6174757265206c656e6774680081529150610ff8565b60208082528101610583816111e9565b6020808252810161058381602281527f45434453413a20696e76616c6964207369676e6174757265202773272076616c602082015261756560f01b604082015260600190565b60ff8116610b2e565b6080810161128a8287610b5d565b6112976020830186611273565b6112a46040830185610b5d565b610b936060830184610b5d56fea26469706673582212204d1c5b92a4ba2bbb601ac27083b382ad011ba7fe43666791055a485bc4acb57364736f6c63430008110033";

type WalletExampleConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: WalletExampleConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class WalletExample__factory extends ContractFactory {
  constructor(...args: WalletExampleConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    shield: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<WalletExample> {
    return super.deploy(shield, overrides || {}) as Promise<WalletExample>;
  }
  override getDeployTransaction(
    shield: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(shield, overrides || {});
  }
  override attach(address: string): WalletExample {
    return super.attach(address) as WalletExample;
  }
  override connect(signer: Signer): WalletExample__factory {
    return super.connect(signer) as WalletExample__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): WalletExampleInterface {
    return new utils.Interface(_abi) as WalletExampleInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): WalletExample {
    return new Contract(address, _abi, signerOrProvider) as WalletExample;
  }
}
