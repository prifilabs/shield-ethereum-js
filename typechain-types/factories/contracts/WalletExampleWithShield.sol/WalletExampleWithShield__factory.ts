/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  PayableOverrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  WalletExampleWithShield,
  WalletExampleWithShieldInterface,
} from "../../../contracts/WalletExampleWithShield.sol/WalletExampleWithShield";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract Shield",
        name: "shield",
        type: "address",
      },
    ],
    stateMutability: "payable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "reason",
        type: "string",
      },
    ],
    name: "InvalidCredentials",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "c",
        type: "address",
      },
    ],
    name: "IsShieldable",
    type: "event",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "to",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "call",
            type: "bytes",
          },
          {
            internalType: "uint256",
            name: "timestamp",
            type: "uint256",
          },
          {
            internalType: "bytes[]",
            name: "approvals",
            type: "bytes[]",
          },
        ],
        internalType: "struct Credentials",
        name: "credentials",
        type: "tuple",
      },
    ],
    name: "burn",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "address",
            name: "to",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "call",
            type: "bytes",
          },
          {
            internalType: "uint256",
            name: "timestamp",
            type: "uint256",
          },
          {
            internalType: "bytes[]",
            name: "approvals",
            type: "bytes[]",
          },
        ],
        internalType: "struct Credentials",
        name: "credentials",
        type: "tuple",
      },
    ],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040526040516200138a3803806200138a8339810160408190526200002691620000cc565b600080546001600160a01b0319166001600160a01b03831617905560405181907f63e9224e63cb34d86b43ad704e00293889c168d42800490986f06bbd4809b06590620000759030906200010a565b60405180910390a150506200011a565b60006001600160a01b0382165b92915050565b6000620000928262000085565b620000b08162000098565b8114620000bc57600080fd5b50565b80516200009281620000a5565b600060208284031215620000e357620000e3600080fd5b6000620000f18484620000bf565b949350505050565b620001048162000085565b82525050565b60208101620000928284620000f9565b611260806200012a6000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063b372d53d1461003b578063d0a82e1214610050575b600080fd5b61004e610049366004610973565b610063565b005b61004e61005e3660046109e5565b610279565b60005460408051635c975abb60e01b8152905183926001600160a01b031691635c975abb9160048083019260209291908290030181865afa1580156100ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100d09190610a32565b15610127576000546001600160a01b031630148015610101575063da1f874d60e01b6001600160e01b031960003516145b61012757604051632022058360e01b815260040161011e90610a81565b60405180910390fd5b60008160405160200161013a9190610bd9565b60408051601f19818403018152919052516101559036610c00565b600080549192506001600160a01b0390911690632f82f58a908490339030906001600160e01b03198135169061018e9088903681610c13565b6040518763ffffffff1660e01b81526004016101af96959493929190610c76565b600060405180830381865afa1580156101cc573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526101f49190810190610d4f565b50604051339085156108fc029086906000818181858888f19350505050158015610222573d6000803e3d6000fd5b506001806000846060015160008151811061023f5761023f610d89565b602002602001015180519060200120815260200190815260200160002060006101000a81548160ff02191690831515021790555050505050565b60006102886020830183610d9f565b6102956020840184610dc0565b84604001356040516020016102ad9493929190610e1e565b60408051601f198184030181529190528051602090910120905060006103426102d96060850185610e4e565b60008181106102ea576102ea610d89565b90506020028101906102fc9190610dc0565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061033c92508691506104cd9050565b906104fd565b60008054919250906001600160a01b0316634c485a2285846103676020830183610d9f565b61037460208a018a610dc0565b61038391600491600091610c13565b61038c91610ea2565b61039960208b018b610dc0565b6040518763ffffffff1660e01b81526004016103ba96959493929190611082565b600060405180830381865afa1580156103d7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526103ff9190810190610d4f565b905060005b81518110156104c657336001600160a01b031682828151811061042957610429610d89565b60200260200101516001600160a01b0316036104b45760018060006104516060890189610e4e565b600081811061046257610462610d89565b90506020028101906104749190610dc0565b6040516104829291906110a6565b6040518091039020815260200190815260200160002060006101000a81548160ff0219169083151502179055506104c6565b806104be816110b3565b915050610404565b5050505050565b6000816040516020016104e091906110cd565b604051602081830303815290604052805190602001209050919050565b600080600061050c8585610523565b9150915061051981610568565b5090505b92915050565b60008082516041036105595760208301516040840151606085015160001a61054d8782858561061a565b94509450505050610561565b506000905060025b9250929050565b600081600481111561057c5761057c611108565b036105845750565b600181600481111561059857610598611108565b036105b55760405162461bcd60e51b815260040161011e90611152565b60028160048111156105c9576105c9611108565b036105e65760405162461bcd60e51b815260040161011e90611196565b60038160048111156105fa576105fa611108565b036106175760405162461bcd60e51b815260040161011e906111a6565b50565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083111561065157506000905060036106c8565b60006001878787876040516000815260200160405260405161067694939291906111f5565b6020604051602081039080840390855afa158015610698573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166106c1576000600192509250506106c8565b9150600090505b94509492505050565b805b811461061757600080fd5b803561051d816106d1565b634e487b7160e01b600052604160045260246000fd5b601f19601f83011681018181106001600160401b0382111715610724576107246106e9565b6040525050565b600061073660405190565b905061074282826106ff565b919050565b60006001600160a01b03821661051d565b6106d381610747565b803561051d81610758565b60006001600160401b03821115610785576107856106e9565b601f19601f83011660200192915050565b82818337506000910152565b60006107b56107b08461076c565b61072b565b9050828152602081018484840111156107d0576107d0600080fd5b6107db848285610796565b509392505050565b600082601f8301126107f7576107f7600080fd5b81356108078482602086016107a2565b949350505050565b60006001600160401b03821115610828576108286106e9565b5060209081020190565b60006108406107b08461080f565b8381529050602080820190840283018581111561085f5761085f600080fd5b835b8181101561089f5780356001600160401b0381111561088257610882600080fd5b80860161088f89826107e3565b8552505060209283019201610861565b5050509392505050565b600082601f8301126108bd576108bd600080fd5b8135610807848260208601610832565b6000608082840312156108e2576108e2600080fd5b6108ec608061072b565b905060006108fa8484610761565b82525060208201356001600160401b0381111561091957610919600080fd5b610925848285016107e3565b6020830152506040610939848285016106de565b60408301525060608201356001600160401b0381111561095b5761095b600080fd5b610967848285016108a9565b60608301525092915050565b6000806040838503121561098957610989600080fd5b600061099585856106de565b92505060208301356001600160401b038111156109b4576109b4600080fd5b6109c0858286016108cd565b9150509250929050565b6000608082840312156109df576109df600080fd5b50919050565b6000602082840312156109fa576109fa600080fd5b81356001600160401b03811115610a1357610a13600080fd5b610807848285016109ca565b8015156106d3565b805161051d81610a1f565b600060208284031215610a4757610a47600080fd5b60006108078484610a27565b6014815260006020820173151a194814da1a595b19081a5cc81c185d5cd95960621b815291505b5060200190565b6020808252810161051d81610a53565b610a9a81610747565b82525050565b60005b83811015610abb578181015183820152602001610aa3565b50506000910152565b6000610ace825190565b808452602084019350610ae5818560208601610aa0565b601f19601f8201165b9093019392505050565b80610a9a565b6000610b0a8383610ac4565b9392505050565b6000610b1b825190565b80845260208401935083602082028501610b358560200190565b8060005b85811015610b6a5784840389528151610b528582610afe565b94506020830160209a909a0199925050600101610b39565b5091979650505050505050565b80516000906080840190610b8b8582610a91565b5060208301518482036020860152610ba38282610ac4565b9150506040830151610bb86040860182610af8565b5060608301518482036060860152610bd08282610b11565b95945050505050565b60208082528101610b0a8184610b77565b634e487b7160e01b600052601160045260246000fd5b8181038181111561051d5761051d610bea565b60008085851115610c2657610c26600080fd5b83861115610c3657610c36600080fd5b5050820193919092039150565b6001600160e01b03198116610a9a565b8183526000602084019350610c69838584610796565b601f19601f840116610aee565b60a08082528101610c878189610b77565b9050610c966020830188610a91565b610ca36040830187610a91565b610cb06060830186610c43565b8181036080830152610cc3818486610c53565b98975050505050505050565b805161051d81610758565b6000610ce86107b08461080f565b83815290506020808201908402830185811115610d0757610d07600080fd5b835b8181101561089f5780610d1c8882610ccf565b84525060209283019201610d09565b600082601f830112610d3f57610d3f600080fd5b8151610807848260208601610cda565b600060208284031215610d6457610d64600080fd5b81516001600160401b03811115610d7d57610d7d600080fd5b61080784828501610d2b565b634e487b7160e01b600052603260045260246000fd5b600060208284031215610db457610db4600080fd5b60006108078484610761565b6000808335601e1936859003018112610ddb57610ddb600080fd5b8084019250823591506001600160401b03821115610dfb57610dfb600080fd5b602083019250600182023603831315610e1657610e16600080fd5b509250929050565b60608101610e2c8287610a91565b8181036020830152610e3f818587610c53565b9050610bd06040830184610af8565b6000808335601e1936859003018112610e6957610e69600080fd5b8084019250823591506001600160401b03821115610e8957610e89600080fd5b60209283019282023603831315610e1657610e16600080fd5b80356001600160e01b03191682826004821015610ed557610ed06001600160e01b0319836004036008021b90565b831692505b505092915050565b6000610b0a6020840184610761565b6000808335601e1936859003018112610f0757610f07600080fd5b8381016020810193503591506001600160401b03821115610f2a57610f2a600080fd5b36829003831315610e1657610e16600080fd5b6000610b0a60208401846106de565b6000808335601e1936859003018112610f6757610f67600080fd5b8381016020810193503591506001600160401b03821115610f8a57610f8a600080fd5b602082023603831315610e1657610e16600080fd5b6000610807848484610c53565b818352600060208401935083602084028101838060005b87811015610b6a578484038952610fda8284610eec565b610fe5868284610f9f565b95506020840160209b909b019a93505050600101610fc3565b60006080830161100e8380610edd565b6110188582610a91565b506110266020840184610eec565b8583036020870152611039838284610c53565b9250505061104a6040840184610f3d565b6110576040860182610af8565b506110656060840184610f4c565b8583036060870152611078838284610fac565b9695505050505050565b60a08082528101610c878189610ffe565b60006110a0838584610796565b50500190565b6000610807828486611093565b600060001982036110c6576110c6610bea565b5060010190565b7f19457468657265756d205369676e6564204d6573736167653a0a3332000000008152601c0160006110ff8284610af8565b50602001919050565b634e487b7160e01b600052602160045260246000fd5b601881526000602082017f45434453413a20696e76616c6964207369676e6174757265000000000000000081529150610a7a565b6020808252810161051d8161111e565b601f81526000602082017f45434453413a20696e76616c6964207369676e6174757265206c656e6774680081529150610a7a565b6020808252810161051d81611162565b6020808252810161051d81602281527f45434453413a20696e76616c6964207369676e6174757265202773272076616c602082015261756560f01b604082015260600190565b60ff8116610a9a565b608081016112038287610af8565b61121060208301866111ec565b61121d6040830185610af8565b610bd06060830184610af856fea2646970667358221220dde995230732b836f22a9fe611a101b34fa434d5c586a42ac80d9c1c682d42fe64736f6c63430008110033";

type WalletExampleWithShieldConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: WalletExampleWithShieldConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class WalletExampleWithShield__factory extends ContractFactory {
  constructor(...args: WalletExampleWithShieldConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    shield: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<WalletExampleWithShield> {
    return super.deploy(
      shield,
      overrides || {}
    ) as Promise<WalletExampleWithShield>;
  }
  override getDeployTransaction(
    shield: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(shield, overrides || {});
  }
  override attach(address: string): WalletExampleWithShield {
    return super.attach(address) as WalletExampleWithShield;
  }
  override connect(signer: Signer): WalletExampleWithShield__factory {
    return super.connect(signer) as WalletExampleWithShield__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): WalletExampleWithShieldInterface {
    return new utils.Interface(_abi) as WalletExampleWithShieldInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): WalletExampleWithShield {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as WalletExampleWithShield;
  }
}
