/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export type CredentialsStruct = {
  to: PromiseOrValue<string>;
  call: PromiseOrValue<BytesLike>;
  timestamp: PromiseOrValue<BigNumberish>;
  approvals: PromiseOrValue<BytesLike>[];
};

export type CredentialsStructOutput = [string, string, BigNumber, string[]] & {
  to: string;
  call: string;
  timestamp: BigNumber;
  approvals: string[];
};

export type UserStruct = {
  addr: PromiseOrValue<string>;
  roles: PromiseOrValue<BytesLike>;
};

export type UserStructOutput = [string, string] & {
  addr: string;
  roles: string;
};

export interface ShieldInterface extends utils.Interface {
  functions: {
    "addPolicy(bytes32,bytes8[],(address,bytes,uint256,bytes[]))": FunctionFragment;
    "addRoles(bytes32[],(address,bytes,uint256,bytes[]))": FunctionFragment;
    "assignPolicy(address,bytes4,bytes32,(address,bytes,uint256,bytes[]))": FunctionFragment;
    "burnCredentials((address,bytes,uint256,bytes[]))": FunctionFragment;
    "getAssignedPolicy(address,bytes4)": FunctionFragment;
    "getPolicy(bytes32)": FunctionFragment;
    "getRoles()": FunctionFragment;
    "getUser(address)": FunctionFragment;
    "initialize(bytes32[],(address,bytes8)[],bytes8[])": FunctionFragment;
    "pause((address,bytes,uint256,bytes[]))": FunctionFragment;
    "paused()": FunctionFragment;
    "setUser(address,bytes8,(address,bytes,uint256,bytes[]))": FunctionFragment;
    "transfer(address,uint256,(address,bytes,uint256,bytes[]))": FunctionFragment;
    "unpause((address,bytes,uint256,bytes[]))": FunctionFragment;
    "validateCredentials((address,bytes,uint256,bytes[]),address,address,bytes4,bytes,bool)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addPolicy"
      | "addRoles"
      | "assignPolicy"
      | "burnCredentials"
      | "getAssignedPolicy"
      | "getPolicy"
      | "getRoles"
      | "getUser"
      | "initialize"
      | "pause"
      | "paused"
      | "setUser"
      | "transfer"
      | "unpause"
      | "validateCredentials"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addPolicy",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>[],
      CredentialsStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addRoles",
    values: [PromiseOrValue<BytesLike>[], CredentialsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "assignPolicy",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      CredentialsStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "burnCredentials",
    values: [CredentialsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getAssignedPolicy",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPolicy",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "getRoles", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getUser",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      PromiseOrValue<BytesLike>[],
      UserStruct[],
      PromiseOrValue<BytesLike>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "pause",
    values: [CredentialsStruct]
  ): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setUser",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      CredentialsStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      CredentialsStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "unpause",
    values: [CredentialsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "validateCredentials",
    values: [
      CredentialsStruct,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<boolean>
    ]
  ): string;

  decodeFunctionResult(functionFragment: "addPolicy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addRoles", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "assignPolicy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "burnCredentials",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAssignedPolicy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPolicy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getRoles", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getUser", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setUser", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "validateCredentials",
    data: BytesLike
  ): Result;

  events: {
    "AddPolicy(bytes32,bytes8[])": EventFragment;
    "AddRoles(bytes32[])": EventFragment;
    "AssignPolicy(address,bytes4,bytes32)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "IsShieldable(address)": EventFragment;
    "Paused()": EventFragment;
    "SetUser(address,bytes8)": EventFragment;
    "Unpaused()": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddPolicy"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AddRoles"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AssignPolicy"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IsShieldable"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetUser"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export interface AddPolicyEventObject {
  label: string;
  policy: string[];
}
export type AddPolicyEvent = TypedEvent<
  [string, string[]],
  AddPolicyEventObject
>;

export type AddPolicyEventFilter = TypedEventFilter<AddPolicyEvent>;

export interface AddRolesEventObject {
  roles: string[];
}
export type AddRolesEvent = TypedEvent<[string[]], AddRolesEventObject>;

export type AddRolesEventFilter = TypedEventFilter<AddRolesEvent>;

export interface AssignPolicyEventObject {
  to: string;
  sig: string;
  label: string;
}
export type AssignPolicyEvent = TypedEvent<
  [string, string, string],
  AssignPolicyEventObject
>;

export type AssignPolicyEventFilter = TypedEventFilter<AssignPolicyEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface IsShieldableEventObject {
  c: string;
}
export type IsShieldableEvent = TypedEvent<[string], IsShieldableEventObject>;

export type IsShieldableEventFilter = TypedEventFilter<IsShieldableEvent>;

export interface PausedEventObject {}
export type PausedEvent = TypedEvent<[], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface SetUserEventObject {
  addr: string;
  roles: string;
}
export type SetUserEvent = TypedEvent<[string, string], SetUserEventObject>;

export type SetUserEventFilter = TypedEventFilter<SetUserEvent>;

export interface UnpausedEventObject {}
export type UnpausedEvent = TypedEvent<[], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface Shield extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ShieldInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addPolicy(
      label: PromiseOrValue<BytesLike>,
      policy: PromiseOrValue<BytesLike>[],
      credentials: CredentialsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addRoles(
      _roles: PromiseOrValue<BytesLike>[],
      credentials: CredentialsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    assignPolicy(
      to: PromiseOrValue<string>,
      sig: PromiseOrValue<BytesLike>,
      label: PromiseOrValue<BytesLike>,
      credentials: CredentialsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    burnCredentials(
      credentials: CredentialsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getAssignedPolicy(
      to: PromiseOrValue<string>,
      sig: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getPolicy(
      label: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getRoles(overrides?: CallOverrides): Promise<[string[]]>;

    getUser(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    initialize(
      _roles: PromiseOrValue<BytesLike>[],
      _users: UserStruct[],
      policy: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    pause(
      credentials: CredentialsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    setUser(
      addr: PromiseOrValue<string>,
      _roles: PromiseOrValue<BytesLike>,
      credentials: CredentialsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transfer(
      _to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      credentials: CredentialsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unpause(
      credentials: CredentialsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    validateCredentials(
      credentials: CredentialsStruct,
      sender: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      f: PromiseOrValue<BytesLike>,
      call: PromiseOrValue<BytesLike>,
      full: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;
  };

  addPolicy(
    label: PromiseOrValue<BytesLike>,
    policy: PromiseOrValue<BytesLike>[],
    credentials: CredentialsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addRoles(
    _roles: PromiseOrValue<BytesLike>[],
    credentials: CredentialsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  assignPolicy(
    to: PromiseOrValue<string>,
    sig: PromiseOrValue<BytesLike>,
    label: PromiseOrValue<BytesLike>,
    credentials: CredentialsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  burnCredentials(
    credentials: CredentialsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getAssignedPolicy(
    to: PromiseOrValue<string>,
    sig: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getPolicy(
    label: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getRoles(overrides?: CallOverrides): Promise<string[]>;

  getUser(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  initialize(
    _roles: PromiseOrValue<BytesLike>[],
    _users: UserStruct[],
    policy: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  pause(
    credentials: CredentialsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  setUser(
    addr: PromiseOrValue<string>,
    _roles: PromiseOrValue<BytesLike>,
    credentials: CredentialsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transfer(
    _to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    credentials: CredentialsStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unpause(
    credentials: CredentialsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  validateCredentials(
    credentials: CredentialsStruct,
    sender: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    f: PromiseOrValue<BytesLike>,
    call: PromiseOrValue<BytesLike>,
    full: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  callStatic: {
    addPolicy(
      label: PromiseOrValue<BytesLike>,
      policy: PromiseOrValue<BytesLike>[],
      credentials: CredentialsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    addRoles(
      _roles: PromiseOrValue<BytesLike>[],
      credentials: CredentialsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    assignPolicy(
      to: PromiseOrValue<string>,
      sig: PromiseOrValue<BytesLike>,
      label: PromiseOrValue<BytesLike>,
      credentials: CredentialsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    burnCredentials(
      credentials: CredentialsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    getAssignedPolicy(
      to: PromiseOrValue<string>,
      sig: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getPolicy(
      label: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getRoles(overrides?: CallOverrides): Promise<string[]>;

    getUser(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    initialize(
      _roles: PromiseOrValue<BytesLike>[],
      _users: UserStruct[],
      policy: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;

    pause(
      credentials: CredentialsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    setUser(
      addr: PromiseOrValue<string>,
      _roles: PromiseOrValue<BytesLike>,
      credentials: CredentialsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    transfer(
      _to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      credentials: CredentialsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(
      credentials: CredentialsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    validateCredentials(
      credentials: CredentialsStruct,
      sender: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      f: PromiseOrValue<BytesLike>,
      call: PromiseOrValue<BytesLike>,
      full: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<string[]>;
  };

  filters: {
    "AddPolicy(bytes32,bytes8[])"(
      label?: PromiseOrValue<BytesLike> | null,
      policy?: null
    ): AddPolicyEventFilter;
    AddPolicy(
      label?: PromiseOrValue<BytesLike> | null,
      policy?: null
    ): AddPolicyEventFilter;

    "AddRoles(bytes32[])"(roles?: null): AddRolesEventFilter;
    AddRoles(roles?: null): AddRolesEventFilter;

    "AssignPolicy(address,bytes4,bytes32)"(
      to?: PromiseOrValue<string> | null,
      sig?: null,
      label?: PromiseOrValue<BytesLike> | null
    ): AssignPolicyEventFilter;
    AssignPolicy(
      to?: PromiseOrValue<string> | null,
      sig?: null,
      label?: PromiseOrValue<BytesLike> | null
    ): AssignPolicyEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "IsShieldable(address)"(c?: null): IsShieldableEventFilter;
    IsShieldable(c?: null): IsShieldableEventFilter;

    "Paused()"(): PausedEventFilter;
    Paused(): PausedEventFilter;

    "SetUser(address,bytes8)"(
      addr?: PromiseOrValue<string> | null,
      roles?: null
    ): SetUserEventFilter;
    SetUser(
      addr?: PromiseOrValue<string> | null,
      roles?: null
    ): SetUserEventFilter;

    "Unpaused()"(): UnpausedEventFilter;
    Unpaused(): UnpausedEventFilter;
  };

  estimateGas: {
    addPolicy(
      label: PromiseOrValue<BytesLike>,
      policy: PromiseOrValue<BytesLike>[],
      credentials: CredentialsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addRoles(
      _roles: PromiseOrValue<BytesLike>[],
      credentials: CredentialsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    assignPolicy(
      to: PromiseOrValue<string>,
      sig: PromiseOrValue<BytesLike>,
      label: PromiseOrValue<BytesLike>,
      credentials: CredentialsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    burnCredentials(
      credentials: CredentialsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getAssignedPolicy(
      to: PromiseOrValue<string>,
      sig: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPolicy(
      label: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoles(overrides?: CallOverrides): Promise<BigNumber>;

    getUser(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _roles: PromiseOrValue<BytesLike>[],
      _users: UserStruct[],
      policy: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    pause(
      credentials: CredentialsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    setUser(
      addr: PromiseOrValue<string>,
      _roles: PromiseOrValue<BytesLike>,
      credentials: CredentialsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transfer(
      _to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      credentials: CredentialsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unpause(
      credentials: CredentialsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    validateCredentials(
      credentials: CredentialsStruct,
      sender: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      f: PromiseOrValue<BytesLike>,
      call: PromiseOrValue<BytesLike>,
      full: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addPolicy(
      label: PromiseOrValue<BytesLike>,
      policy: PromiseOrValue<BytesLike>[],
      credentials: CredentialsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addRoles(
      _roles: PromiseOrValue<BytesLike>[],
      credentials: CredentialsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    assignPolicy(
      to: PromiseOrValue<string>,
      sig: PromiseOrValue<BytesLike>,
      label: PromiseOrValue<BytesLike>,
      credentials: CredentialsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    burnCredentials(
      credentials: CredentialsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getAssignedPolicy(
      to: PromiseOrValue<string>,
      sig: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPolicy(
      label: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoles(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUser(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _roles: PromiseOrValue<BytesLike>[],
      _users: UserStruct[],
      policy: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    pause(
      credentials: CredentialsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setUser(
      addr: PromiseOrValue<string>,
      _roles: PromiseOrValue<BytesLike>,
      credentials: CredentialsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transfer(
      _to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      credentials: CredentialsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      credentials: CredentialsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    validateCredentials(
      credentials: CredentialsStruct,
      sender: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      f: PromiseOrValue<BytesLike>,
      call: PromiseOrValue<BytesLike>,
      full: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
