/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export type UserStruct = {
  addr: PromiseOrValue<string>;
  roles: PromiseOrValue<BytesLike>;
};

export type UserStructOutput = [string, string] & {
  addr: string;
  roles: string;
};

export type CredentialsStruct = {
  timestamp: PromiseOrValue<BigNumberish>;
  chainid: PromiseOrValue<BigNumberish>;
  to: PromiseOrValue<string>;
  call: PromiseOrValue<BytesLike>;
  approvals: PromiseOrValue<BytesLike>[];
};

export type CredentialsStructOutput = [
  BigNumber,
  BigNumber,
  string,
  string,
  string[]
] & {
  timestamp: BigNumber;
  chainid: BigNumber;
  to: string;
  call: string;
  approvals: string[];
};

export interface ShieldInterface extends utils.Interface {
  functions: {
    "addPolicy(bytes32,bytes8[])": FunctionFragment;
    "addRoles(bytes32[])": FunctionFragment;
    "assignPolicy(address,bytes4,bytes32)": FunctionFragment;
    "cancelCredentials((uint256,uint256,address,bytes,bytes[]))": FunctionFragment;
    "canceled(bytes32)": FunctionFragment;
    "executeCredentials((uint256,uint256,address,bytes,bytes[]))": FunctionFragment;
    "executed(bytes32)": FunctionFragment;
    "getAssignedPolicy(address,bytes4)": FunctionFragment;
    "getPolicy(bytes32)": FunctionFragment;
    "getRoles()": FunctionFragment;
    "getUser(address)": FunctionFragment;
    "hasAnyRoles(address,bytes8)": FunctionFragment;
    "initialize(bytes32[],(address,bytes8)[],bytes8[])": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "setUsers((address,bytes8)[])": FunctionFragment;
    "unpause()": FunctionFragment;
    "validateCredentials((uint256,uint256,address,bytes,bytes[]),bool)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addPolicy"
      | "addRoles"
      | "assignPolicy"
      | "cancelCredentials"
      | "canceled"
      | "executeCredentials"
      | "executed"
      | "getAssignedPolicy"
      | "getPolicy"
      | "getRoles"
      | "getUser"
      | "hasAnyRoles"
      | "initialize"
      | "pause"
      | "paused"
      | "setUsers"
      | "unpause"
      | "validateCredentials"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addPolicy",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "addRoles",
    values: [PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "assignPolicy",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelCredentials",
    values: [CredentialsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "canceled",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "executeCredentials",
    values: [CredentialsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "executed",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAssignedPolicy",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPolicy",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "getRoles", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getUser",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasAnyRoles",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      PromiseOrValue<BytesLike>[],
      UserStruct[],
      PromiseOrValue<BytesLike>[]
    ]
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setUsers",
    values: [UserStruct[]]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "validateCredentials",
    values: [CredentialsStruct, PromiseOrValue<boolean>]
  ): string;

  decodeFunctionResult(functionFragment: "addPolicy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addRoles", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "assignPolicy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelCredentials",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "canceled", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "executeCredentials",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "executed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAssignedPolicy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPolicy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getRoles", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getUser", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hasAnyRoles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setUsers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "validateCredentials",
    data: BytesLike
  ): Result;

  events: {
    "Initialized(uint8)": EventFragment;
    "Paused()": EventFragment;
    "PolicyAdded(bytes32,bytes8[])": EventFragment;
    "PolicyAssigned(address,bytes4,bytes32)": EventFragment;
    "RolesAdded(bytes32[])": EventFragment;
    "Unpaused()": EventFragment;
    "UsersSet(tuple[])": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PolicyAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PolicyAssigned"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RolesAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UsersSet"): EventFragment;
}

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface PausedEventObject {}
export type PausedEvent = TypedEvent<[], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface PolicyAddedEventObject {
  label: string;
  policy: string[];
}
export type PolicyAddedEvent = TypedEvent<
  [string, string[]],
  PolicyAddedEventObject
>;

export type PolicyAddedEventFilter = TypedEventFilter<PolicyAddedEvent>;

export interface PolicyAssignedEventObject {
  to: string;
  sig: string;
  label: string;
}
export type PolicyAssignedEvent = TypedEvent<
  [string, string, string],
  PolicyAssignedEventObject
>;

export type PolicyAssignedEventFilter = TypedEventFilter<PolicyAssignedEvent>;

export interface RolesAddedEventObject {
  roles: string[];
}
export type RolesAddedEvent = TypedEvent<[string[]], RolesAddedEventObject>;

export type RolesAddedEventFilter = TypedEventFilter<RolesAddedEvent>;

export interface UnpausedEventObject {}
export type UnpausedEvent = TypedEvent<[], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface UsersSetEventObject {
  users: UserStructOutput[];
}
export type UsersSetEvent = TypedEvent<
  [UserStructOutput[]],
  UsersSetEventObject
>;

export type UsersSetEventFilter = TypedEventFilter<UsersSetEvent>;

export interface Shield extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ShieldInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addPolicy(
      label: PromiseOrValue<BytesLike>,
      policy: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addRoles(
      _roles: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    assignPolicy(
      to: PromiseOrValue<string>,
      sig: PromiseOrValue<BytesLike>,
      label: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    cancelCredentials(
      credentials: CredentialsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    canceled(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    executeCredentials(
      credentials: CredentialsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    executed(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getAssignedPolicy(
      to: PromiseOrValue<string>,
      sig: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getPolicy(
      label: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getRoles(overrides?: CallOverrides): Promise<[string[]]>;

    getUser(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    hasAnyRoles(
      user: PromiseOrValue<string>,
      _roles: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    initialize(
      _roles: PromiseOrValue<BytesLike>[],
      _users: UserStruct[],
      policy: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    setUsers(
      _users: UserStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    validateCredentials(
      credentials: CredentialsStruct,
      full: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;
  };

  addPolicy(
    label: PromiseOrValue<BytesLike>,
    policy: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addRoles(
    _roles: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  assignPolicy(
    to: PromiseOrValue<string>,
    sig: PromiseOrValue<BytesLike>,
    label: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  cancelCredentials(
    credentials: CredentialsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  canceled(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  executeCredentials(
    credentials: CredentialsStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  executed(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getAssignedPolicy(
    to: PromiseOrValue<string>,
    sig: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getPolicy(
    label: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getRoles(overrides?: CallOverrides): Promise<string[]>;

  getUser(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  hasAnyRoles(
    user: PromiseOrValue<string>,
    _roles: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initialize(
    _roles: PromiseOrValue<BytesLike>[],
    _users: UserStruct[],
    policy: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  pause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  setUsers(
    _users: UserStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  validateCredentials(
    credentials: CredentialsStruct,
    full: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  callStatic: {
    addPolicy(
      label: PromiseOrValue<BytesLike>,
      policy: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;

    addRoles(
      _roles: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;

    assignPolicy(
      to: PromiseOrValue<string>,
      sig: PromiseOrValue<BytesLike>,
      label: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelCredentials(
      credentials: CredentialsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    canceled(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    executeCredentials(
      credentials: CredentialsStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    executed(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getAssignedPolicy(
      to: PromiseOrValue<string>,
      sig: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getPolicy(
      label: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getRoles(overrides?: CallOverrides): Promise<string[]>;

    getUser(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    hasAnyRoles(
      user: PromiseOrValue<string>,
      _roles: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(
      _roles: PromiseOrValue<BytesLike>[],
      _users: UserStruct[],
      policy: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    setUsers(_users: UserStruct[], overrides?: CallOverrides): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;

    validateCredentials(
      credentials: CredentialsStruct,
      full: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<string[]>;
  };

  filters: {
    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "Paused()"(): PausedEventFilter;
    Paused(): PausedEventFilter;

    "PolicyAdded(bytes32,bytes8[])"(
      label?: PromiseOrValue<BytesLike> | null,
      policy?: null
    ): PolicyAddedEventFilter;
    PolicyAdded(
      label?: PromiseOrValue<BytesLike> | null,
      policy?: null
    ): PolicyAddedEventFilter;

    "PolicyAssigned(address,bytes4,bytes32)"(
      to?: PromiseOrValue<string> | null,
      sig?: null,
      label?: PromiseOrValue<BytesLike> | null
    ): PolicyAssignedEventFilter;
    PolicyAssigned(
      to?: PromiseOrValue<string> | null,
      sig?: null,
      label?: PromiseOrValue<BytesLike> | null
    ): PolicyAssignedEventFilter;

    "RolesAdded(bytes32[])"(roles?: null): RolesAddedEventFilter;
    RolesAdded(roles?: null): RolesAddedEventFilter;

    "Unpaused()"(): UnpausedEventFilter;
    Unpaused(): UnpausedEventFilter;

    "UsersSet(tuple[])"(users?: null): UsersSetEventFilter;
    UsersSet(users?: null): UsersSetEventFilter;
  };

  estimateGas: {
    addPolicy(
      label: PromiseOrValue<BytesLike>,
      policy: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addRoles(
      _roles: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    assignPolicy(
      to: PromiseOrValue<string>,
      sig: PromiseOrValue<BytesLike>,
      label: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    cancelCredentials(
      credentials: CredentialsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    canceled(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    executeCredentials(
      credentials: CredentialsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    executed(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAssignedPolicy(
      to: PromiseOrValue<string>,
      sig: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPolicy(
      label: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoles(overrides?: CallOverrides): Promise<BigNumber>;

    getUser(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasAnyRoles(
      user: PromiseOrValue<string>,
      _roles: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _roles: PromiseOrValue<BytesLike>[],
      _users: UserStruct[],
      policy: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    setUsers(
      _users: UserStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    validateCredentials(
      credentials: CredentialsStruct,
      full: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addPolicy(
      label: PromiseOrValue<BytesLike>,
      policy: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addRoles(
      _roles: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    assignPolicy(
      to: PromiseOrValue<string>,
      sig: PromiseOrValue<BytesLike>,
      label: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    cancelCredentials(
      credentials: CredentialsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    canceled(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    executeCredentials(
      credentials: CredentialsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    executed(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAssignedPolicy(
      to: PromiseOrValue<string>,
      sig: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPolicy(
      label: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoles(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUser(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasAnyRoles(
      user: PromiseOrValue<string>,
      _roles: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _roles: PromiseOrValue<BytesLike>[],
      _users: UserStruct[],
      policy: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setUsers(
      _users: UserStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    validateCredentials(
      credentials: CredentialsStruct,
      full: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
