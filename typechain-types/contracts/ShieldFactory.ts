/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export type UserStruct = {
  addr: PromiseOrValue<string>;
  roles: PromiseOrValue<BytesLike>;
};

export type UserStructOutput = [string, string] & {
  addr: string;
  roles: string;
};

export interface ShieldFactoryInterface extends utils.Interface {
  functions: {
    "addUser(address,address)": FunctionFragment;
    "createShield(bytes32,bytes32[],(address,bytes8)[],bytes8[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "addUser" | "createShield"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addUser",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "createShield",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>[],
      UserStruct[],
      PromiseOrValue<BytesLike>[]
    ]
  ): string;

  decodeFunctionResult(functionFragment: "addUser", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createShield",
    data: BytesLike
  ): Result;

  events: {
    "ShieldCreated(address,address,bytes32)": EventFragment;
    "UserAdded(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ShieldCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UserAdded"): EventFragment;
}

export interface ShieldCreatedEventObject {
  creator: string;
  shield: string;
  name: string;
}
export type ShieldCreatedEvent = TypedEvent<
  [string, string, string],
  ShieldCreatedEventObject
>;

export type ShieldCreatedEventFilter = TypedEventFilter<ShieldCreatedEvent>;

export interface UserAddedEventObject {
  shield: string;
  user: string;
}
export type UserAddedEvent = TypedEvent<[string, string], UserAddedEventObject>;

export type UserAddedEventFilter = TypedEventFilter<UserAddedEvent>;

export interface ShieldFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ShieldFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addUser(
      shield: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createShield(
      name: PromiseOrValue<BytesLike>,
      roles: PromiseOrValue<BytesLike>[],
      users: UserStruct[],
      policy: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  addUser(
    shield: PromiseOrValue<string>,
    user: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createShield(
    name: PromiseOrValue<BytesLike>,
    roles: PromiseOrValue<BytesLike>[],
    users: UserStruct[],
    policy: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addUser(
      shield: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    createShield(
      name: PromiseOrValue<BytesLike>,
      roles: PromiseOrValue<BytesLike>[],
      users: UserStruct[],
      policy: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ShieldCreated(address,address,bytes32)"(
      creator?: null,
      shield?: PromiseOrValue<string> | null,
      name?: null
    ): ShieldCreatedEventFilter;
    ShieldCreated(
      creator?: null,
      shield?: PromiseOrValue<string> | null,
      name?: null
    ): ShieldCreatedEventFilter;

    "UserAdded(address,address)"(
      shield?: null,
      user?: null
    ): UserAddedEventFilter;
    UserAdded(shield?: null, user?: null): UserAddedEventFilter;
  };

  estimateGas: {
    addUser(
      shield: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createShield(
      name: PromiseOrValue<BytesLike>,
      roles: PromiseOrValue<BytesLike>[],
      users: UserStruct[],
      policy: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addUser(
      shield: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createShield(
      name: PromiseOrValue<BytesLike>,
      roles: PromiseOrValue<BytesLike>[],
      users: UserStruct[],
      policy: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
