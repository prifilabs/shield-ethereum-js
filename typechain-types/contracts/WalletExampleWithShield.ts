/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export type CredentialsStruct = {
  to: PromiseOrValue<string>;
  call: PromiseOrValue<BytesLike>;
  timestamp: PromiseOrValue<BigNumberish>;
  approvals: PromiseOrValue<BytesLike>[];
};

export type CredentialsStructOutput = [string, string, BigNumber, string[]] & {
  to: string;
  call: string;
  timestamp: BigNumber;
  approvals: string[];
};

export interface WalletExampleWithShieldInterface extends utils.Interface {
  functions: {
    "withdraw(uint256,(address,bytes,uint256,bytes[]))": FunctionFragment;
  };

  getFunction(nameOrSignatureOrTopic: "withdraw"): FunctionFragment;

  encodeFunctionData(
    functionFragment: "withdraw",
    values: [PromiseOrValue<BigNumberish>, CredentialsStruct]
  ): string;

  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "IsShieldable(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "IsShieldable"): EventFragment;
}

export interface IsShieldableEventObject {
  c: string;
}
export type IsShieldableEvent = TypedEvent<[string], IsShieldableEventObject>;

export type IsShieldableEventFilter = TypedEventFilter<IsShieldableEvent>;

export interface WalletExampleWithShield extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: WalletExampleWithShieldInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    withdraw(
      amount: PromiseOrValue<BigNumberish>,
      credentials: CredentialsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  withdraw(
    amount: PromiseOrValue<BigNumberish>,
    credentials: CredentialsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    withdraw(
      amount: PromiseOrValue<BigNumberish>,
      credentials: CredentialsStruct,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "IsShieldable(address)"(c?: null): IsShieldableEventFilter;
    IsShieldable(c?: null): IsShieldableEventFilter;
  };

  estimateGas: {
    withdraw(
      amount: PromiseOrValue<BigNumberish>,
      credentials: CredentialsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    withdraw(
      amount: PromiseOrValue<BigNumberish>,
      credentials: CredentialsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
